%%
headers
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include <pygtk/pygtk.h>

#include "plugins/gedit-plugins-engine.h"
#include "plugins/gedit-plugin.h"
#include "plugins/gedit-plugin-info.h"

static PyObject *
_helper_wrap_string_list (const gchar **list)
{
	PyObject *py_list;
	PyObject *item;

	if ((py_list = PyList_New (0)) == NULL) {
		return NULL;
	}

	while (*list) {
		item = Py_BuildValue ("s", *list);
		
		if (item == NULL) {
			Py_DECREF (py_list);
			return NULL;
		}
		
		PyList_Append (py_list, item);
		Py_DECREF (item);
		++list;
	}
	
	return py_list;
}

static PyObject *
_helper_wrap_gboxed_glist (const GList *list)
{
	PyObject *py_list;
	const GList *tmp;

	if ((py_list = PyList_New (0)) == NULL) {
		return NULL;
	}
	
	for (tmp = list; tmp != NULL; tmp = tmp->next) {
		/* CHECKME: not sure if it should also make a copy, but I think
		   it should ... */
		PyObject *py_obj = pyg_boxed_new(GEDIT_TYPE_PLUGIN_INFO, tmp->data, TRUE, TRUE);

		if (py_obj == NULL) {
			Py_DECREF (py_list);
			return NULL;
		}
		
		PyList_Append (py_list, py_obj);
		Py_DECREF (py_obj);
	}

	return py_list;
}

static PyObject *
_helper_get_plugin_instance (GeditPlugin *plugin)
{
	Py_INCREF (Py_None);
	return Py_None;
}

%%
modulename gedit.plugins
%%
import gtk.Window as PyGtkWindow_Type
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  _*
  *_get_type
  gedit_plugin_info_copy
  gedit_plugin_info_free
%%
override gedit_plugin_info_get_authors
PyObject *
_wrap_gedit_plugin_info_get_authors (PyGObject *self)
{
    const gchar **list;
    PyObject *py_list;

    list = gedit_plugin_info_get_authors (GEDIT_PLUGIN_INFO (self->obj));

    py_list = _helper_wrap_string_list (list);

    return py_list;
}
%%
override gedit_plugin_info_get_plugin
static PyObject *
_wrap_gedit_plugin_info_get_plugin(PyObject *self)
{
	GeditPluginInfo *info = pyg_boxed_get(self, GeditPluginInfo);
	
	return _helper_get_plugin_instance(gedit_plugin_info_get_plugin(info));
}
%%
override gedit_plugins_engine_get_plugin kwargs
static PyObject *
_wrap_gedit_plugins_engine_get_plugin(PyGObject *self, PyObject *args, PyObject *kwargs)
{
	static char *kwlist[] = {"name", NULL};
	char *name;
	GeditPlugin *plugin;

	if (!PyArg_ParseTupleAndKeywords (args, 
					  kwargs,
					  "s:GeditPluginsEngine.get_plugin", 
					  kwlist, 
					  &name))
		return NULL;

	plugin = gedit_plugins_engine_get_plugin(GEDIT_PLUGINS_ENGINE(self->obj), name);
	return _helper_get_plugin_instance(plugin);	
}
%%
override gedit_plugins_engine_get_plugin_list
static PyObject *
_wrap_gedit_plugins_engine_get_plugin_list(PyGObject *self)
{
	const GList *list;
	
	list = gedit_plugins_engine_get_plugin_list (GEDIT_PLUGINS_ENGINE(self->obj));
	return _helper_wrap_gboxed_glist (list);
}
